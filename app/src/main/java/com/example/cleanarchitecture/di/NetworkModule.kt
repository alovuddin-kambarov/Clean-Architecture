package com.example.cleanarchitecture.diimport com.example.data.network.ApiServiceimport com.example.data.network.FlowCallAdapterFactoryimport com.example.data.repository.UserRepositoryImplimport com.example.domain.models.repository.UserRepositoryimport dagger.Bindsimport dagger.Moduleimport dagger.Providesimport dagger.hilt.InstallInimport dagger.hilt.components.SingletonComponentimport retrofit2.Retrofitimport retrofit2.converter.gson.GsonConverterFactoryimport javax.inject.Singleton@InstallIn(SingletonComponent::class)@Module(includes = [NetworkModule.BindModule::class])class NetworkModule {    @Provides    @Singleton    fun provideBaseUrl(): String = "https://www.thecocktaildb.com/api/json/v1/1/"    @Provides    @Singleton    fun provideRetrofit(baseUrl: String): Retrofit {        return Retrofit.Builder()            .baseUrl(baseUrl)            .addConverterFactory(GsonConverterFactory.create())            .addCallAdapterFactory(FlowCallAdapterFactory)            .build()    }    @Provides    @Singleton    fun provideApiService(retrofit: Retrofit): ApiService = retrofit.create(ApiService::class.java)    @Module    @InstallIn(SingletonComponent::class)    abstract class BindModule {        @Binds        abstract fun bindApiRepository(userRepositoryImpl: UserRepositoryImpl): UserRepository    }}